import os
import streamlit as st
from PIL import Image
import numpy as np

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
TF_AVAILABLE = False
try:
    import tensorflow as tf
    from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2, preprocess_input, decode_predictions
    from tensorflow.keras.preprocessing import image as keras_image
    TF_AVAILABLE = True
except ImportError:
    pass

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
st.set_page_config(
    page_title="–ö—É—Ö–æ–Ω–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
    layout="centered"  # –õ—É—á—à–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
)

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üç≥ –ö—É—Ö–æ–Ω–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
with st.container():
    uploaded = st.file_uploader(
        "üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", 
        type=["png", "jpg", "jpeg"],
        accept_multiple_files=False,
        help="–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ"
    )

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
with st.expander("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ—Ü–µ–ø—Ç–æ–≤", expanded=False):
    max_recipes = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤", 1, 5, 2)
    dietary = st.selectbox("–î–∏–µ—Ç–∞", ["–ù–µ—Ç", "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è", "–í–µ–≥–∞–Ω—Å–∫–∞—è", "–ë–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤–∞—è"])
    time_limit = st.selectbox("–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏", ["–õ—é–±–æ–µ", "–¥–æ 15 –º–∏–Ω", "–¥–æ 30 –º–∏–Ω", "–¥–æ 60 –º–∏–Ω"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
if uploaded:
    try:
        img = Image.open(uploaded).convert("RGB")
        st.image(img, use_column_width=True)
        
        detected_items = []
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
        if TF_AVAILABLE:
            with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
                model = MobileNetV2(weights="imagenet")
                img_resized = img.resize((224, 224))
                x = keras_image.img_to_array(img_resized)
                x = np.expand_dims(x, axis=0)
                x = preprocess_input(x)
                preds = model.predict(x)
                decoded = decode_predictions(preds, top=5)[0]
                
                detected_items = [
                    (name.replace("_", " "), float(prob)) 
                    for _, name, prob in decoded
                    if prob > 0.3  # –§–∏–ª—å—Ç—Ä –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                ]
        else:
            st.warning("–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        if detected_items:
            st.subheader("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç—ã:")
            final_ingredients = []
            
            for name, prob in detected_items:
                if st.checkbox(
                    f"{name} ({prob:.0%})",
                    value=True,
                    key=f"ing_{name}"
                ):
                    final_ingredients.append(name)
            
            # –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã"):
                manual_input = st.text_input(
                    "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                    placeholder="—è–π—Ü–∞, –º–æ–ª–æ–∫–æ, —Ö–ª–µ–±"
                )
                if manual_input:
                    final_ingredients.extend([
                        x.strip() for x in manual_input.split(",") 
                        if x.strip()
                    ])
            
            if final_ingredients:
                st.success(f"üçé –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {', '.join(final_ingredients)}")
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
                if st.button("üç≥ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã", type="primary"):
                    with st.spinner("üßë‚Äçüç≥ –ì–æ—Ç–æ–≤–ª—é —Ä–µ—Ü–µ–ø—Ç—ã..."):
                        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                        recipes = generate_local_recipes(
                            final_ingredients,
                            max_recipes,
                            dietary,
                            time_limit
                        )
                        
                        st.subheader("üçΩÔ∏è –í–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã")
                        st.write(recipes)
        else:
            st.info("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é.")
            manual_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
            if manual_input:
                final_ingredients = [x.strip() for x in manual_input.split(",") if x.strip()]
                
                if st.button("üç≥ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã", type="primary"):
                    with st.spinner("üßë‚Äçüç≥ –ì–æ—Ç–æ–≤–ª—é —Ä–µ—Ü–µ–ø—Ç—ã..."):
                        recipes = generate_local_recipes(
                            final_ingredients,
                            max_recipes,
                            dietary,
                            time_limit
                        )
                        st.subheader("üçΩÔ∏è –í–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã")
                        st.write(recipes)
                        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
else:
    st.info("üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ")

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
def generate_local_recipes(ingredients, count, diet, time):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –±–µ–∑ OpenAI"""
    if not ingredients:
        return "–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤"
    
    base = [
        f"### ü•ó –°–∞–ª–∞—Ç –∏–∑ {ingredients[0]} –∏ {ingredients[-1]}\n"
        f"**–í—Ä–µ–º—è:** 10-15 –º–∏–Ω\n**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:** {', '.join(ingredients[:3])}\n"
        "1. –ù–∞—Ä–µ–∂—å—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n2. –°–º–µ—à–∞–π—Ç–µ —Å –º–∞—Å–ª–æ–º\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–µ–∂–∏–º\n\n",
        
        f"### üç≥ –û–º–ª–µ—Ç —Å {ingredients[0]}\n"
        f"**–í—Ä–µ–º—è:** 15 –º–∏–Ω\n**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:** —è–π—Ü–∞, {ingredients[0]}\n"
        "1. –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞\n2. –û–±–∂–∞—Ä—å—Ç–µ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ –≥–æ—Ä—è—á–∏–º\n\n",
        
        f"### ü•™ –ë—É—Ç–µ—Ä–±—Ä–æ–¥—ã —Å {ingredients[0]}\n"
        "**–í—Ä–µ–º—è:** 5 –º–∏–Ω\n**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:** —Ö–ª–µ–±, {ingredients[0]}\n"
        "1. –ù–∞–º–∞–∂—å—Ç–µ —Ö–ª–µ–±\n2. –î–æ–±–∞–≤—å—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ\n\n"
    ]
    
    return "\n".join(base[:count])